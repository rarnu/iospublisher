(*
Parameters:
  1: ProjectName
  2: SchemaName
  3: EnableBitcode(0 = false, 1 = true)
  4: AppStore Account
  5: AppStore Password
*)

program iospublisher;

{$mode objfpc}{$H+}

uses
  cthreads, Classes, sysutils, process, IniFiles;

const
  BUFSIZE = 1024;
  ALTOOLPATH = '/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool';

procedure innerRunCmd(cmd: string; params: TStringList);
var
  p: TProcess;
  byteRead: LongInt;
  buf: array[0..BUFSIZE - 1] of Byte;
  outstr: string = '';
begin
  p := TProcess.Create(nil);
  p.Executable:= cmd;
  p.Parameters.Assign(params);
  p.Options:= [poUsePipes, poStderrToOutPut];
  p.Execute;
  while (True) do begin
    byteRead:= p.Output.Read(buf, BUFSIZE);
    if (byteRead = 0) then Break;
    SetLength(outstr, byteRead);
    Move(buf[0], outstr[1], byteRead);
    Write(outstr);
  end;
  p.Free;
end;

function isUnderProjectPath(): Boolean;
var
  path: string;
  src: TSearchRec;
  ret: Boolean = False;
begin
  path := GetCurrentDir;
  if (not path.EndsWith('/')) then path += '/';
  if (FindFirst(path + '*.*', faAnyFile, src) = 0) then begin
    repeat
      if (src.Name = '.') or (src.Name = '..') then Continue;
      if (string(src.Name).EndsWith('.xcworkspace')) or (string(src.Name).EndsWith('.xcodeproj')) then begin
        ret := True;
        Break;
      end;
    until FindNext(src) <> 0;
    FindClose(src);
  end;
  Exit(ret);
end;

procedure generatePlist(ABitcode: Boolean; AProvisionKey: string; AProvisionValue: string; ACertificate: string; ATeamId: string);
var
  path: string;
begin
  path := GetCurrentDir;
  if (not path.EndsWith('/')) then path += '/';
  path += 'export.plist';
  with TStringList.Create do begin
    Clear;
    Add('<?xml version="1.0" encoding="UTF-8"?>');
    Add('<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">');
    Add('<plist version="1.0">');
    Add('<dict>');
    Add('    <key>method</key>');
    Add('    <string>app-store</string>');
    Add('    <key>compileBitcode</key>');
    if (ABitcode) then Add('    <true/>') else Add('    <false/>');
    Add('    <key>provisioningProfiles</key>');
    Add('    <dict>');
    Add(Format('        <key>%s</key>', [AProvisionKey]));
    Add(Format('        <string>%s</string>', [AProvisionValue]));
    Add('    </dict>');
    Add('    <key>signingCertificate</key>');
    Add(Format('    <string>%s</string>', [ACertificate]));
    Add('    <key>signingStyle</key>');
    Add('    <string>manual</string>');
    Add('    <key>stripSwiftSymbols</key>');
    Add('    <true/>');
    Add('    <key>teamID</key>');
    Add(Format('    <string>%s</string>', [ATeamId]));
    Add('    <key>uploadSymbols</key>');
    Add('    <true/>');
    Add('</dict>');
    Add('</plist>');
    SaveToFile(path);
    Free;
  end;
end;

procedure clean();
var
  params: TStringList;
begin
  params := TStringList.Create;
  params.Clear;
  params.Add('clean');
  params.Add('-configuration');
  params.Add('Release');
  innerRunCmd('xcodebuild', params);
  params.Free;
end;

procedure compileProject(buildPath:string; work: string; schemaName: string; projectName: string);
var
  params: TStringList;
begin
  params := TStringList.Create;
  params.Clear;
  params.Add('archive');
  if (work.EndsWith('.xcodeproj')) then begin
    params.Add('-project');
    params.Add(work);
  end else begin
    params.Add('-workspace');
    params.Add(work);
  end;
  params.Add('-scheme');
  params.Add(schemaName);
  params.Add('-configuration');
  params.Add('Release');
  params.Add('-archivePath');
  params.Add(buildPath + '/' + projectName + '.xcarchive');
  innerRunCmd('xcodebuild', params);
  params.Free;
end;

procedure buildIpa(buildPath: string; projectPath: string; projectName: string; ipaPath: string; plistPath: string);
var
  params: TStringList;
begin
  params := TStringList.Create;
  params.Clear;
  params.Add('-exportArchive');
  params.Add('-archivePath');
  params.Add(buildPath + '/' + projectName + '.xcarchive');
  params.Add('-configuration');
  params.Add('Release');
  params.Add('-exportPath');
  params.Add(ipaPath);
  params.Add('-exportOptionsPlist');
  params.Add(plistPath);
  innerRunCmd('xcodebuild', params);
  params.Free;
end;

procedure validateApp(ipaPath: string; schemaName: string; userName: string; userPass: string);
var
  params: TStringList;
begin
  params := TStringList.Create;
  params.Clear;
  params.Add('--validate-app');
  params.Add('-f');
  params.Add(ipaPath + '/' + schemaName + '.ipa');
  params.Add('-u');
  params.Add(userName);
  params.Add('-p');
  params.Add(userPass);
  params.Add('-t');
  params.Add('ios');
  params.Add('--output-format');
  params.Add('xml');
  innerRunCmd(ALTOOLPATH, params);
  params.Free;
end;

procedure uploadApp(ipaPath: string; schemaName: string; userName: string; userPass: string);
var
  params: TStringList;
begin
  params := TStringList.Create;
  params.Clear;
  params.Add('--upload-app');
  params.Add('-f');
  params.Add(ipaPath + '/' + schemaName + '.ipa');
  params.Add('-u');
  params.Add(userName);
  params.Add('-p');
  params.Add(userPass);
  params.Add('-t');
  params.Add('ios');
  params.Add('--output-format');
  params.Add('xml');
  innerRunCmd(ALTOOLPATH, params);
  params.Free;
end;

procedure writeHelp();
begin
  WriteLn('Usage: iospublisher (v1.0.4)');
  WriteLn('    iospublisher init/build <upload>');
  WriteLn('');
  WriteLn('    you must init a project first and fill all parameters in iospub.cfg');
  WriteLn('');
  WriteLn('    sample:');
  WriteLn('        [Config]');
  WriteLn('        ProjectFile=Sample.xcworkspace');
  WriteLn('        ProjectName=Sample');
  WriteLn('        SchemeName=MySample');
  WriteLn('        EnableBitcode=1');
  WriteLn('        ProvisionKey=ProvisionKey');
  WriteLn('        ProvisionValue=ProvisionValue');
  WriteLn('        Certificate=iPhone Distribution');
  WriteLn('        TeamID=1234567890');
  WriteLn('        AppStoreAccount=apple@apple.com');
  WriteLn('        AppStorePassword=password');
  WriteLn('');
end;

var

  cmd: string;
  up: string;
  cfg: TIniFile;

  currDir: string;
  ipaPath: string;
  // env
  projectFile: string;
  projectPath: string;
  projectName: string;
  schemaName: string;
  buildPath: string;
  plistPath: string;
  userName: string;
  userPass: string;
begin
  if (not isUnderProjectPath()) then begin
    WriteLn('iOS Pusblisher must be run under an iOS project.');
    Exit;
  end;

  if (ParamCount <> 1) and (ParamCount <> 2) then begin
    writeHelp();
    Exit;
  end;

  cmd := ParamStr(1);
  if (cmd <> 'init') and (cmd <> 'build') then begin
    writeHelp();
    Exit;
  end;

  if (cmd = 'init') then begin
    with TStringList.Create do begin
      Add('[Config]');
      Add('ProjectFile=');
      Add('ProjectName=');
      Add('SchemeName=');
      Add('EnableBitcode=');
      Add('ProvisionKey=');
      Add('ProvisionValue=');
      Add('Certificate=');
      Add('TeamID=');
      Add('AppStoreAccount=');
      Add('AppStorePassword=');
      SaveToFile('iospub.cfg');
      Free;
    end;
    Exit;
  end;

  if (not FileExists('iospub.cfg')) then begin
    writeHelp();
    Exit;
  end;

  up:= ParamStr(2);
  cfg := TIniFile.Create('iospub.cfg');
  currDir:= GetCurrentDir;
  if (not currDir.EndsWith('/')) then currDir += '/';
  ipaPath:= currDir + 'IPADIR';
  if (not DirectoryExists(ipaPath)) then ForceDirectories(ipaPath);
  projectFile:= cfg.ReadString('Config', 'ProjectFile', '');
  projectPath:= GetCurrentDir;
  projectName:= cfg.ReadString('Config', 'ProjectName', '');
  schemaName:= cfg.ReadString('Config', 'SchemeName', '');
  buildPath:= projectPath + '/build';
  plistPath:= projectPath + '/export.plist';
  generatePlist(
    cfg.ReadInteger('Config', 'EnableBitcode', 0) = 1,
    cfg.ReadString('Config', 'ProvisionKey', ''),
    cfg.ReadString('Config', 'ProvisionValue', ''),
    cfg.ReadString('Config', 'Certificate', ''),
    cfg.ReadString('Config', 'TeamID', '')
  );
  userName:= cfg.ReadString('Config', 'AppStoreAccount', '');
  userPass:= cfg.ReadString('Config', 'AppStorePassword', '');
  cfg.Free;

  clean();
  compileProject(buildPath, projectFile, schemaName, projectName);
  buildIpa(buildPath, projectPath, projectName, ipaPath, plistPath);
  validateApp(ipaPath, schemaName, userName, userPass);
  if (up = 'upload') then begin
    uploadApp(ipaPath, schemaName, userName, userPass);
  end;
end.

