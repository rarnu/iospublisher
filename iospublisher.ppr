program iospublisher;

{$mode objfpc}{$H+}

uses
  cthreads, Classes, sysutils, process, modulecfg, moduleCommand,
  module3rdUpload, modulePlist, moduleMisc;

var

  cmd: string;
  up: string;

  currDir: string;
  ipaPath: string;
  // env
  projectFile: string;
  projectPath: string;
  projectName: string;
  schemaName: string;
  buildPath: string;
  plistPath: string;
  // appstore
  userName: string;
  userPass: string;
  // pgyer
  ukey: string;
  apikey: string;
  // fir
  bundleId: string;
  apitoken: string;
  iconPath: string;
  infoPlist: string;
begin

  if (ParamCount <> 1) and (ParamCount <> 2) then begin
    writeHelp();
    Exit;
  end;

  if (not isUnderProjectPath()) then begin
    WriteLn('iOS Pusblisher must be run under an iOS project.');
    Exit;
  end;

  cmd := ParamStr(1);
  if (cmd <> 'init') and (cmd <> 'build') then begin
    writeHelp();
    Exit;
  end;

  if (cmd = 'init') then begin
    generateDefaultConfig();
    Exit;
  end;

  if (not FileExists('iospub.cfg')) then begin
    writeHelp();
    Exit;
  end;

  up:= ParamStr(2);
  ioscfg.loadCfg('iospub.cfg');
  currDir:= GetCurrentDir;
  if (not currDir.EndsWith('/')) then currDir += '/';
  ipaPath:= currDir + 'IPADIR';
  if (not DirectoryExists(ipaPath)) then ForceDirectories(ipaPath);
  projectFile:= ioscfg.ProjFile;
  projectPath:= GetCurrentDir;
  projectName:= ioscfg.ProjName;
  schemaName:= ioscfg.SchemeName;
  buildPath:= projectPath + '/build';
  plistPath:= projectPath + '/export.plist';

  if (up = 'appstore') then begin
    generatePlist(
      ioscfg.BitCode,
      ioscfg.AppStoreProvisionKey,
      ioscfg.AppStoreProvisionValue,
      ioscfg.AppStoreCertificate,
      ioscfg.AppStoreTeamId
    );
    userName:= ioscfg.AppStoreAccount;
    userPass:= ioscfg.AppStorePassword;
    clean();
    compileProject(buildPath, projectFile, schemaName, projectName);
    buildIpa(buildPath, projectPath, projectName, ipaPath, plistPath);
    validateApp(ipaPath, schemaName, userName, userPass);
    uploadApp(ipaPath, schemaName, userName, userPass);
  end else if (up = 'pgyer') then begin
    generatePlistEnterprise(
      ioscfg.BitCode,
      ioscfg.PgyerProvisionKey,
      ioscfg.PgyerProvisionValue,
      ioscfg.PgyerCertificate,
      ioscfg.PgyerTeamId,
      ioscfg.PgyerAutoSign
    );
    ukey:= ioscfg.PgyerUKey;
    apikey:= ioscfg.PgyerApiKey;
    clean();
    compileProject(buildPath, projectFile, schemaName, projectName);
    buildIpa(buildPath, projectPath, projectName, ipaPath, plistPath);
    uploadPgyer(ipaPath, schemaName, ukey, apikey);
  end else if (up = 'enterprise') then begin
    generatePlistEnterprise(
      ioscfg.BitCode,
      ioscfg.EnterpriseProvisionKey,
      ioscfg.EnterpriseProvisionValue,
      ioscfg.EnterpriseCertificate,
      ioscfg.EnterpriseTeamId,
      ioscfg.EnterpriseAutoSign
    );
    clean();
    compileProject(buildPath, projectFile, schemaName, projectName);
    buildIpa(buildPath, projectPath, projectName, ipaPath, plistPath);
  end else if (up = 'fir') then begin
    generatePlistEnterprise(
      ioscfg.BitCode,
      ioscfg.FirProvisionKey,
      ioscfg.FirProvisionValue,
      ioscfg.FirCertificate,
      ioscfg.FirTeamId,
      ioscfg.FirAutoSign
    );
    clean();
    compileProject(buildPath, projectFile, schemaName, projectName);
    buildIpa(buildPath, projectPath, projectName, ipaPath, plistPath);
    bundleId:= ioscfg.FirBundleId;
    apitoken:= ioscfg.FirApiToken;
    infoPlist:= ioscfg.FirInfoPlist;
    iconPath:= ioscfg.FirIcon;
    uploadFir(ipaPath, iconPath, schemaName, bundleId, apitoken, infoPlist);
  end;

end.

